mod Rectangle
    class(x: Int, y: Int, width: Int, height: Int)
    traits(X: Int, Y: Int, Width: Int, Height: Int, Area: Int)
    defs
        X: x
        Y: y
        Width: width
        Height: height
        Area: .Width * .Height

# Square 'inherits' from Rectangle by defining some of its traits.
# The remaining traits are 'inherited' from the Rectangle class.
# The Square implements the Rectangle type because if defines all of its traits.
mod Square
    class(x: Int, y: Int, size: Int)
    defs
        Rectangle\X: x
        Rectangle\Y: y
        # Overrides the rectangle Width and Height
        Rectangle\Width: size
        Rectangle\Height: size
        # Rectangle\Area is automatically implemented

lets
    Main: Int
        Square
            x: Int(value: 1)
            y: Int(value: 1)
            size: Int(value: 10)
        .Area

#> 100
